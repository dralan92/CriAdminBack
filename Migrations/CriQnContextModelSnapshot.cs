// <auto-generated />
using System;
using CriAdmin.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CriAdmin.Migrations
{
    [DbContext(typeof(CriQnContext))]
    partial class CriQnContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CriAdmin.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CountryId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("CriAdmin.Models.CriQn", b =>
                {
                    b.Property<int>("QnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryFk")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Opt1")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Opt2")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Opt3")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Opt4")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Qn")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TierFk")
                        .HasColumnType("int");

                    b.Property<int>("Weight1")
                        .HasColumnType("int");

                    b.Property<int>("Weight2")
                        .HasColumnType("int");

                    b.Property<int?>("Weight3")
                        .HasColumnType("int");

                    b.Property<int?>("Weight4")
                        .HasColumnType("int");

                    b.HasKey("QnId");

                    b.HasIndex("CountryFk");

                    b.HasIndex("TierFk");

                    b.ToTable("CriQn");
                });

            modelBuilder.Entity("CriAdmin.Models.Tier", b =>
                {
                    b.Property<int>("TierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TierName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TierId");

                    b.ToTable("Tier");
                });

            modelBuilder.Entity("CriAdmin.Models.CriQn", b =>
                {
                    b.HasOne("CriAdmin.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CriAdmin.Models.Tier", "Tier")
                        .WithMany()
                        .HasForeignKey("TierFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
